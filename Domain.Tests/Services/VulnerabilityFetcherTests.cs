using System.Text;
using FluentAssertions;
using Microsoft.Extensions.Options;
using Moq;
using Moq.Protected;
using VulnData.DataCollector.Domain.Options;
using VulnData.DataCollector.Domain.Services;
using Xunit;

namespace Domain.Tests.Services;

public class VulnerabilityFetcherTests
{
    private readonly VulnerabilityFetcher _fetcher;
    private readonly Mock<IOptions<NvdOption>> _nvdOptions;
    private readonly Mock<IHttpClientFactory> _httpClientFactoryMock;
    
    public VulnerabilityFetcherTests()
    {
        _nvdOptions = new Mock<IOptions<NvdOption>>();
        _httpClientFactoryMock = new Mock<IHttpClientFactory>();
        _fetcher = new VulnerabilityFetcher(_nvdOptions.Object, _httpClientFactoryMock.Object);
    }

    [Fact]
    public async Task VulnerabilityFetcher_GetDataAsync_ReturnObject()
    {
        //Arrange
        int startIndex = 0;
        int maxResults = 2000;
        
        NvdOption nvdOption = new NvdOption() { ApiKey = "apiKey" };
        _nvdOptions.Setup(o => o.Value).Returns(nvdOption);
        
        HttpClient httpClient = new HttpClient();
        
        _httpClientFactoryMock.Setup(c => c.CreateClient(It.IsAny<string>())).Returns(httpClient);
        
        //Act
        var result = await _fetcher.GetDataAsync(startIndex, maxResults);

        //Assert
        result.Should().NotBeNull();
    }
    
    [Fact]
    public async Task VulnerabilityFetcher_GetVulnCountAsync_ReturnObject()
    {
        //Arrange
        int minCountOfVulnerabilities = 2000;
        
        NvdOption nvdOption = new NvdOption() { ApiKey = "apiKey" };
        _nvdOptions.Setup(o => o.Value).Returns(nvdOption);
        
        HttpClient httpClient = new HttpClient();
        
        _httpClientFactoryMock.Setup(c => c.CreateClient(It.IsAny<string>())).Returns(httpClient);
        
        //Act
        var result = await _fetcher.GetVulnCountAsync();

        //Assert
        result.Should().BeGreaterThanOrEqualTo(minCountOfVulnerabilities);
    }
}